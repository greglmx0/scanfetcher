name: Deploy scanfetcher

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare VPS directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "Preparing deployment directory..."
            sudo mkdir -p /var/www/html/scanfetcher
            sudo chown -R $USER:$USER /var/www/html/scanfetcher
            sudo chmod -R 755 /var/www/html/scanfetcher

      - name: copy app files on VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "."
          target: "/var/www/html/scanfetcher"
          strip_components: 1
          overwrite: true
          rm: true

      - name: Deploy scanfetcher
        env:
          PHP_LITE_ADMIN_PASSWORD: ${{ secrets.PHP_LITE_ADMIN_PASSWORD }}
          SEND_MESSAGE_TELEGRAM: ${{ secrets.SEND_MESSAGE_TELEGRAM }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: PHP_LITE_ADMIN_PASSWORD,SEND_MESSAGE_TELEGRAM,TELEGRAM_BOT_TOKEN,TELEGRAM_CHAT_ID
          script: |
            echo "Starting docker compose for deploy scanfetcher..."
            cd /var/www/html/scanfetcher

            # Ensure proper ownership and permissions
            sudo chown -R $USER:$USER /var/www/html/scanfetcher
            sudo chmod -R 755 /var/www/html/scanfetcher

            # Create data directory with proper permissions for the container user (1001:1001)
            mkdir -p data

            # Create database file if it doesn't exist
            if [ ! -f data/scanfetcher.db ]; then
              touch data/scanfetcher.db
            fi

            # Set proper ownership for the data directory to match container user
            sudo chown -R 1001:1001 data/
            sudo chmod -R 755 data/
            sudo chmod 644 data/scanfetcher.db

            # Stop existing containers gracefully
            docker compose -f docker-compose.prod.yaml down || true

            # Clean up any dangling images and containers
            docker system prune -f || true

            # Start new deployment
            docker compose -f docker-compose.prod.yaml up --build -d

            # Wait a moment for container to start
            sleep 5

            # Check container status
            docker compose -f docker-compose.prod.yaml ps

            echo "Deploy scanfetcher done"
