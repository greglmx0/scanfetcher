name: Deploy scanfetcher

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Build binary
        # Ne fonctionne pas pour l'image alpine du Dockerfile
        # GOOS=linux GOARCH=amd64 go build -o scanfetcher ./cmd/main.go
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o scanfetcher ./cmd/main.go

      - name: Prepare artifact for SCP
        run: |
          tar -czf deploy.tar.gz Dockerfile.prod docker-compose.prod.yaml scanfetcher || true

      - name: Change rights for deploy.tar.gz
        run: |
          chmod 644 deploy.tar.gz

      - name: copy app files on VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "deploy.tar.gz"
          target: "/var/www/html/scanfetcher"
          # strip_components: 0
          overwrite: true
          # rm: true

      - name: Extract on VPS and deploy
        env:
          PHP_LITE_ADMIN_PASSWORD: ${{ secrets.PHP_LITE_ADMIN_PASSWORD }}
          SEND_MESSAGE_TELEGRAM: ${{ secrets.SEND_MESSAGE_TELEGRAM }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          CRON_JOB_SCHEDULE: ${{ secrets.CRON_JOB_SCHEDULE }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: PHP_LITE_ADMIN_PASSWORD,SEND_MESSAGE_TELEGRAM,TELEGRAM_BOT_TOKEN,TELEGRAM_CHAT_ID,CRON_JOB_SCHEDULE
          script: |
            echo "Preparing deployment directory..."
            sudo mkdir -p /var/www/html/scanfetcher
            sudo chown -R $USER:$USER /var/www/html/scanfetcher
            sudo chmod -R 755 /var/www/html/scanfetcher
            cd /var/www/html/scanfetcher
            if [ -f deploy.tar.gz ]; then
              tar -xzf deploy.tar.gz || { echo "Failed to extract deploy.tar.gz"; exit 1; }
              rm deploy.tar.gz
            fi

            # Ensure data dir exists and permissions are correct
            mkdir -p data
            if [ ! -f data/scanfetcher.db ]; then
              touch data/scanfetcher.db
            fi
            sudo chown -R 1001:1001 data/
            sudo chmod -R 755 data/
            sudo chmod 644 data/scanfetcher.db

            # Stop existing containers gracefully
            docker compose -f docker-compose.prod.yaml down || true

            # Start new deployment
            docker compose -f docker-compose.prod.yaml up --build -d

            # Wait and check
            sleep 5
            docker compose -f docker-compose.prod.yaml ps
            echo "Deploy scanfetcher done"
